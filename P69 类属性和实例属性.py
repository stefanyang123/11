
# 功能属性相近的对象，可以抽象为类，功能属性相近的类（因为类也是对象），又能抽象出父类
# 类属性
# 就是类对象所拥有的属性，它被所有类对象 的 实例对象 所共有
# 类对象和实例对象都能访问
# 实例属性
# 实例对象所拥有的属性，只能通过实例对象访问
class Student:
    name='李明'   #类属性  属于类对象Student所拥有有
    def __init__(self,age):
        self.age=age  #实例属性
        pass
    pass
# Student.name='李易峰' #通过类对象对类属性修改 后面所有引用类对象的都会变
lm=Student(18)
print(lm.name)   #通过实例对象对象去访问类属性
# 这个过程是 当lm执行name时，他会先在自己(init)找，如果没有就往对象的上一级，也就是类里找
print(lm.age)    #通过实例对象对象去访问实例属性

print('--------通过类对象（类也是个对象）去访问类属性------------')
print(Student.name)  #通过类对象（类也是个对象）去访问类属性
# print(Student.age)  #如果通过类对象，去访问实例属性，会报错

print(lm.age)
# 类属性 是可以被类对象(类名.类属性)和实例对象(实例对象名.类属性)共同访问使用的
# 实例属性  只可以被实例对象访问(实例对象名.实例属性)
# 所有实例访问 类属性 都是一样的
# 实例属性在每个实例中独有一份，而类属性是所有实例对象共有的一份
print('--------------------')
lm.name='刘德华'  #这里想通过实例对象去修改类属性，可以吗？
print(lm.name)
print(Student.name)  #类对象的类属性并没有被修改

# 不可以，因为类属性归类对象所有，实例对象只有使用权
# 这句代码是在类对象上声明了一个新的实例属性name

# 实例对象拥有实例方法和实例属性，类对象拥有类方法和类属性，静态方法是独立的，与他们两个无关
# 谁拥有归属权谁就有权修改，实例对象有权修改实例方法和实例属性，类对象有权修改类方法和类属性
# 实例对象能访问类属性和类方法，但是无权修改,要修改类属性和类方法必须通过类对象
# 而类对象要通过 类名.实例方法(用这个类实例化的对象,参数如果有)  访问实例方法 或者修改
# 一个对象(实例对象/类对象)执行一个方法时，会先在自身找，如果找不到这个方法，会往自己的上一级找
# 实例对象的上一级是类对象，类对象的上一级是父类对象，中途如果找到方法，则会执行，不会往上一级再找了，出现了对上一级方法的覆盖











