# 元组
# 是一种不可变的 序列(有下标)，在创建之后不能做任何的修改
# 特点：
# 1.不可变
# 2.用()来创建元组类型，数据项用,来分割。可以是任何类型
# 3.当元组中只有一个元素时要加上逗号,不然解释器会当做整形来处理
# 4.同样可以支持切片操作

print('------元组的创建------')
tupleA=()                    # tuple 中文翻译是 元组
print(type(tupleA))
# 上面创建了一个空元组，因为元组一经创建就不能修改，所以给他赋值一个新的元组
# 也必然不支持增删改，只能进行查找
tupleA=('abc','89','9.13','stefan',[11,22,33])
print(tupleA)

print('------元组的查询------')
for item in tupleA:        #可以通过for循环遍历，因为是个序列
    print(item)
print(tupleA[2])           #通过切片，打印元组里第三个元素
print(tupleA[2:4])           #通过切片，打印元组里第三，四个元素
print(tupleA[::-1])           #通过切片，反转字符
print(tupleA[::-2])           #通过切片，反转字符，从-1位置开始走两步取一个  也包括-1
print(tupleA[::2])           #通过切片，从0位置开始走两步取一个 也包括0
#步长是正就正着（从左到右）取
print(tupleA[-2:-1:])        #从-2位开始取，到-1位，不包括-1位，也就是打印倒数第二个那一个
# 步长为负就负着（从右到左）取，前面的下标是位置而已
print(tupleA[-1:-2:-1])      #从-2位开始取，到-1位，不包括-1位，也就是打印倒数第二个那一个



# 正序步长为1时，从左往右的时候，第一个下标为0
# 倒叙步长为-1时，从右往左的时候，第一个下标为-1
#下标2，与下标-3，是同一个元素     9.13的下标是2，也是-3
print(tupleA[2])
print(tupleA[-3])
#打印元组前两项的不同表示
print(tupleA[:2])
print(tupleA[:-3])


print('------重新赋值后元组的ip变化------')
tupleA=()
print(id(tupleA))
tupleA=('abc','89','9.13','stefan',[11,22,33])
print(id(tupleA))
# 因为元组一经定义就不可改变，所以再次赋值给同一个变量时，就另外开辟了个内存地址

print('------位于元组里的列表能否修改------')
# tupleA[4]
#   tupleA[4]=1    错误的，这里想修改元组里下标4的元素
print(type(tupleA[4]))   #发现位于下标4的元素的确时给列表，因此可以修改
print('修改前',tupleA[4])
print('修改前的元组',tupleA)
tupleA[4][0]='ybw'       #对元组里下标4的列表的第一位进行修改
print('修改后',tupleA[4])
print('修改后的元组',tupleA)


print('------------')
tupleB=(1)
print(type(tupleB))   #如果元组定义时不加','则1被视为int类型
tupleB=('1')          #如果元组定义时不加','则'1'被视为str类型
print(type(tupleB))
tupleB=(1,)           #当元组中只有一个数据项时，在后边要加上逗号，这样才是一个元组，否则就不是

print('------------')
tupleC=tuple(range(10))        #tuple()强制转换，将一个range类型转换为tuple类型
print(tupleC)
print('------统计------')
print(tupleC.count(9))       #.count(元素)  统计元素出现的次数
















