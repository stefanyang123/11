# 1.python中展现面向对象的三大特征:封装，继承，多态
# 封装:把内容封装到某个地方，便于后面的使用
# 它需要：
    # 把内容封装到某个地方
    # 从另外一个地方调用被封装内容
    # 对于封装来说，其实就是使用初始化构造方法将内容封装到对象中
    # 然后通过对象直接或者self间接来获取被封装内容  （类）

# 继承：子 可以继承 父的内容（属性和行为）
#   爸爸有的儿子都有，儿子有的爸爸不一定有
# 父类 有 子类 的 共性特征
# 例如：每个子类都有 方法吃和喝 ，我不想每次定义一个子类，就重新声明一次方法
# 因此我们选择让父类 有方法吃和喝，子类只需要继承即可，子类不需要重新声明吃和喝方法了，而且子类还能具有独有的实现
# 减少代码的重复，极大的提高效率，精简代码的层级结构便于拓展
# class 子类(父类):
#       子类就可以继承父类中，公共的属性和方法


# 单继承（一个子类继承一个父类）
class Animal:  #把对象狗和猫具有的一些共性行为给提炼出来，放到一个父类里
    def eat(self):
        """
        吃
        :return:
        """
        print('吃')
        pass
    def drink(self):
        """
        喝
        :return:
        """
        print('喝')
        pass
    pass

class Dog(Animal):    #Dog(Animal)  Dog子类 继承 Animal父类 父类有的，子类都有
    def wwj(self):
        print('小狗汪汪叫')
    pass

class Cat(Animal):
    def mmj(self):
        print('小猫喵喵叫')
    pass

d1=Dog()
d1.eat()   #eat()是父类的行为，但是再子类Dog()中也能调用
d1.wwj()
print('----------猫的行为--------')
c1=Cat()
c1.eat()
c1.mmj()

















