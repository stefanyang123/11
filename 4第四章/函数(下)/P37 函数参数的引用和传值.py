"""
在python中万物皆是对象
a=1  其实是将a与 对象1 的内存地址贴在了一起，访问a时，电脑通过内存地址找到1
a=2  把原来在 对象1身上的a标签撕掉，贴到对象2身上
每一个变量 有一个站。每一个对象 有一个内存地址
"""
a=1
def func(x):
    print('修改前x的地址{}'.format(id(x))) #发现修改前a与x,id一样。这样的传值是同一个对象，a与x是对同一对象的引用
    x=2  #现在让x贴在对象2的内存地址上
    print('修改后x的地址{}'.format(id(x))) #发现修改后x的内存地址与a不一样了
    print(x)                    #x此时为2
    pass
#调用函数
print('a的地址:{}'.format(id(a)))
func(a)
print(a)                      #发现修改x=2后a的值不会变还是1
# 因此a是不可变类型，已经确定就不能改变。当改变的时候，会重新开辟新的空间
# 原本a与x指向同一内存空间，由于x改变了，进而开辟了新的内存空间


# 可变类型
li=[]
def testRenc(parms):
    print('列表修改前地址',id(parms))
    li.append([1,2,3])
    print('列表修改后地址', id(parms))
    print('内部的变量对象', li)
    pass
print(id(li))
testRenc(li)
print('外部的变量对象',li)


# 小结
# 1.在python中，万物皆对象，变量，函数，字典,列表....
# 2.在函数调用时，实参传递的就是对象的引用
# 3.在函数内部的处理，不会影响到不可变类型外部变量，会影响到可变类型外部变量
# 4.参数传递是通过对象引用来完成，只是将内存地址传过来，当第一个对x修改时，改变了内存地址
# 对列表修改时，由于传递的始终是同一个地址，所以在函数内处理和函数外是同步变化的,修改时里面的值时，对于对象的引用是不变的










